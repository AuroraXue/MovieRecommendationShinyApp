top50_df$poster <- poster
top50_df$imbdLink <- imdbLink
write.csv(top50_df, "top50_df.csv", row.names = F)
library(omdbapi)
library(dplyr)
library(rvest)
library(RCurl)
library(jpeg)
library(shinyBS)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem("Movies", tabName = "movies",icon = icon("film", lib="font-awesome") )
)
),
dashboardBody(
tabItem(tabName = "movies",
fluidRow(
box(width = NULL,
title = "Top 8 Movies",
status = "info",
collapsible = TRUE,
solidHeader = TRUE,
background = "black",
uiOutput("tiles")),
box(title = "Top 50",
status = "primary",
solidHeader = TRUE,
collapsible = TRUE,
verbatimTextOutput("top50")),
box(title = "Popular but bad movies",
status = "success",
solidHeader = T,
verbatimTextOutput("pop_lrated")),
box(title = "Not popular but great movies",
status = "warning",
solidHeader = T,
verbatimTextOutput("nopop_hrated"))
)##end of fluidRow
)##end of tabItem
)##end of dashBody
)##end of dashbooardPage
server <- function(input, output){
output$tiles <- renderUI({
fluidRow(
lapply(top50_df$poster[1:8], function(i) {
a(box(width=3,
title = img(src = i, height = 350, width = 250),
footer = top50_df$top50[top50_df$poster == i]
), href= top50_df$imbdLink[top50_df$poster == i] , target="_blank")
}) ##end of lappy
)
})##end of renderUI
output$top50 <- renderText({top50_s })
output$pop_lrated <- renderText({pop_lrated_s})
output$nopop_hrated <- renderText({nopop_hrated_s})
}
shinyApp(ui, server )
library(omdbapi)
library(dplyr)
library(rvest)
library(RCurl)
library(jpeg)
library(shinyBS)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem("Movies", tabName = "movies",icon = icon("film", lib="font-awesome") )
)
),
dashboardBody(
tabItem(tabName = "movies",
fluidRow(
box(width = NULL,
title = "Top 8 Movies",
status = "danger",
collapsible = TRUE,
solidHeader = TRUE,
background = "black",
uiOutput("tiles")),
box(title = "Top 50",
status = "primary",
solidHeader = TRUE,
collapsible = TRUE,
verbatimTextOutput("top50")),
box(title = "Popular but bad movies",
status = "success",
solidHeader = T,
verbatimTextOutput("pop_lrated")),
box(title = "Not popular but great movies",
status = "warning",
solidHeader = T,
verbatimTextOutput("nopop_hrated"))
)##end of fluidRow
)##end of tabItem
)##end of dashBody
)##end of dashbooardPage
server <- function(input, output){
output$tiles <- renderUI({
fluidRow(
lapply(top50_df$poster[1:8], function(i) {
a(box(width=3,
title = img(src = i, height = 350, width = 250),
footer = top50_df$top50[top50_df$poster == i]
), href= top50_df$imbdLink[top50_df$poster == i] , target="_blank")
}) ##end of lappy
)
})##end of renderUI
output$top50 <- renderText({top50_s })
output$pop_lrated <- renderText({pop_lrated_s})
output$nopop_hrated <- renderText({nopop_hrated_s})
}
shinyApp(ui, server )
library(omdbapi)
library(dplyr)
library(rvest)
library(RCurl)
library(jpeg)
library(shinyBS)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem("Movies", tabName = "movies",icon = icon("film", lib="font-awesome") )
)
),
dashboardBody(
tabItem(tabName = "movies",
fluidRow(
box(width = NULL,
title = "Top 8 Movies",
status = "danger",
collapsible = TRUE,
solidHeader = FALSE,
background = "black",
uiOutput("tiles")),
box(title = "Top 50",
status = "primary",
solidHeader = TRUE,
collapsible = TRUE,
verbatimTextOutput("top50")),
box(title = "Popular but bad movies",
status = "success",
solidHeader = T,
verbatimTextOutput("pop_lrated")),
box(title = "Not popular but great movies",
status = "warning",
solidHeader = T,
verbatimTextOutput("nopop_hrated"))
)##end of fluidRow
)##end of tabItem
)##end of dashBody
)##end of dashbooardPage
server <- function(input, output){
output$tiles <- renderUI({
fluidRow(
lapply(top50_df$poster[1:8], function(i) {
a(box(width=3,
title = img(src = i, height = 350, width = 250),
footer = top50_df$top50[top50_df$poster == i]
), href= top50_df$imbdLink[top50_df$poster == i] , target="_blank")
}) ##end of lappy
)
})##end of renderUI
output$top50 <- renderText({top50_s })
output$pop_lrated <- renderText({pop_lrated_s})
output$nopop_hrated <- renderText({nopop_hrated_s})
}
shinyApp(ui, server )
setwd("~/Documents/Columbia/Spring 2017/ADS/Spr2017-proj5-grp10")
library(omdbapi)
library(dplyr)
library(rvest)
library(RCurl)
library(jpeg)
library(shinyBS)
library(shiny)
library(shinydashboard)
load("..output/dat2.RData")
top50_df <- read.csv("../output/top50.csv")
load("../output/dat2.RData")
library(omdbapi)
library(dplyr)
library(rvest)
library(RCurl)
library(jpeg)
library(shinyBS)
library(shiny)
library(shinydashboard)
load("../output/dat2.RData")
dat <- dat2
top50_df <- read.csv("../output/top50_df.csv")
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem("Movies", tabName = "movies",icon = icon("film", lib="font-awesome") )
)
),
dashboardBody(
tabItem(tabName = "movies",
fluidRow(
box(width = NULL,
title = "Top 8 Movies",
status = "danger",
collapsible = TRUE,
solidHeader = FALSE,
background = "black",
uiOutput("tiles")),
box(title = "Top 50",
status = "primary",
solidHeader = TRUE,
collapsible = TRUE,
verbatimTextOutput("top50")),
box(title = "Popular but bad movies",
status = "success",
solidHeader = T,
verbatimTextOutput("pop_lrated")),
box(title = "Not popular but great movies",
status = "warning",
solidHeader = T,
verbatimTextOutput("nopop_hrated"))
)##end of fluidRow
)##end of tabItem
)##end of dashBody
)##end of dashbooardPage
server <- function(input, output){
output$tiles <- renderUI({
fluidRow(
lapply(top50_df$poster[1:8], function(i) {
a(box(width=3,
title = img(src = i, height = 350, width = 250),
footer = top50_df$top50[top50_df$poster == i]
), href= top50_df$imbdLink[top50_df$poster == i] , target="_blank")
}) ##end of lappy
)
})##end of renderUI
output$top50 <- renderText({top50_s })
output$pop_lrated <- renderText({pop_lrated_s})
output$nopop_hrated <- renderText({nopop_hrated_s})
}
shinyApp(ui, server )
save(top50_df,file = "top50_df.Rdata")
save(top50_df,file = "top50_df1.RData")
load("../output/dat2.RData")
dat <- dat2
load("../output/top50_df.RData")
movie_agg <- aggregate(dat$rating, list(dat$movie_name), mean)
library(plyr)
load("/Users/ouminamikun/Documents/Columbia/Spring 2017/ADS/final project/dat2.RData")
dat <- dat2
movie_agg <- aggregate(dat$rating, list(dat$movie_name), mean)
colnames(movie_agg) <- c("movies", "avg_rating")
users_count <- aggregate(dat$movie_name,list(dat$movie_name), length)
movie_agg$users_count <- users_count$x
movie_agg <- movie_agg[order(movie_agg$avg_rating, decreasing = T), ]
nopop <- movie_agg[movie_agg$users_count <= 6,]
nopop_hrated <- head(nopop$movies, 10)
pop <- movie_agg[movie_agg$users_count >=76,]
pop_lrated <- rev(tail(pop$movies, 10))
top50 <- head(movie_agg$movies[movie_agg$users_count >= 250],50)
worst50 <- rev(tail(movie_agg$movies, 50))
top50_s <- top50[1]
for(i in 2:length(top50)){
top50_s <- paste(top50_s,top50[i], sep = "\n")
}
pop_lrated_s <- pop_lrated[1]
for(i in 2:length(pop_lrated)){
pop_lrated_s <- paste(pop_lrated_s, pop_lrated[i], sep = "\n")
}
nopop_hrated_s <- nopop_hrated[1]
for(i in 2:length(nopop_hrated)){
nopop_hrated_s <- paste(nopop_hrated_s, nopop_hrated[i],sep = "\n")
}
save.image("~/Documents/Columbia/Spring 2017/ADS/Spr2017-proj5-grp10/workspace.RData")
library(omdbapi)
library(dplyr)
library(rvest)
library(RCurl)
library(jpeg)
library(shinyBS)
library(shiny)
library(shinydashboard)
load("../output/dat2.RData")
dat <- dat2
load("../output/top50_df.RData")
load("../output/wang.RDate")
library(omdbapi)
library(dplyr)
library(rvest)
library(RCurl)
library(jpeg)
library(shinyBS)
library(shiny)
library(shinydashboard)
load("../output/dat2.RData")
dat <- dat2
load("../output/top50_df.RData")
load("../output/wang.RData")
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem("Movies", tabName = "movies",icon = icon("film", lib="font-awesome") )
)
),
dashboardBody(
tabItem(tabName = "movies",
fluidRow(
box(width = NULL,
title = "Top 8 Movies",
status = "danger",
collapsible = TRUE,
solidHeader = FALSE,
background = "black",
uiOutput("tiles")),
box(title = "Top 50",
status = "primary",
solidHeader = TRUE,
collapsible = TRUE,
verbatimTextOutput("top50")),
box(title = "Popular but bad movies",
status = "success",
solidHeader = T,
verbatimTextOutput("pop_lrated")),
box(title = "Not popular but great movies",
status = "warning",
solidHeader = T,
verbatimTextOutput("nopop_hrated"))
)##end of fluidRow
)##end of tabItem
)##end of dashBody
)##end of dashbooardPage
server <- function(input, output){
output$tiles <- renderUI({
fluidRow(
lapply(top50_df$poster[1:8], function(i) {
a(box(width=3,
title = img(src = i, height = 350, width = 250),
footer = top50_df$top50[top50_df$poster == i]
), href= top50_df$imbdLink[top50_df$poster == i] , target="_blank")
}) ##end of lappy
)
})##end of renderUI
output$top50 <- renderText({top50_s })
output$pop_lrated <- renderText({pop_lrated_s})
output$nopop_hrated <- renderText({nopop_hrated_s})
}
shinyApp(ui, server )
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
train <- read.csv("../data/train.csv", stringsAsFactors = F)
test <- read.csv("../data/test.csv", stringsAsFactors = F)
gender <- read.csv("../data/gender_submission.csv", stringsAsFactors = F)
all_data <- bind_rows(train, test)
str(train)
str(test)
all_data$Title <- gsub("(.*, )|(\\..*)", "", all_data$Name)
table(all_data$Sex, all_data$Title)
rare_title <- c("Dona", "Dr", "Lady", "the Countess", "Capt", "Col", "Don", "Jonkheer", "Major","Sir", "Rev")
all_data$Title[all_data$Title == "Mme"] <- "Miss"
all_data$Title[all_data$Title == "Mlle"] <- "Miss"
all_data$Title[all_data$Title == "Ms"] <- "Miss"
all_data$Title[all_data$Title %in% rare_title] <- "Rare Title"
table(all_data$Sex, all_data$Title)
all_data$Surname <- sapply(all_data$Name,
function(x){strsplit(x,"[,.]")[[1]][1]})
all_data$Fsize <- all_data$SibSp + all_data$Parch + 1
all_data$Family <- paste(all_data$Surname, all_data$Fsize, sep = "_")
ggplot(all_data[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat = "count", position = "dodge") +
scale_x_continuous(breaks = c(1:11)) +
labs(x = "Family Size") +
theme_few()
all_data$FsizeD[all_data$Fsize == 1] <- "Singleton"
all_data$FsizeD[all_data$Fsize < 5 & all_data$Fsize > 1] <- "Small"
all_data$FsizeD[all_data$Fsize > 4] <- "Large"
mosaicplot(table(all_data$FsizeD, all_data$Survived), main = "Family Size by Survival", shade = TRUE)
all_data$Deck <- factor(sapply(all_data$Cabin,
function(x){strsplit(x, NULL)[[1]][1]}))
embark_fare <- all_data %>%
filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80), color = "red", linetype = "dashed", lwd = 2) +
scale_y_continuous(labels = dollar_format()) +
theme_few()
all_data$Embarked[c(62, 830)] <- "c"
ggplot(all_data[all_data$Pclass == '3' & all_data$Embarked == 'S', ],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
all_data$Fare[1044] <- median(all_data[all_data$Pclass == "3" && all_data$Embarked == "S",]$Fare, na.rm = TRUE)
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
all_data[factor_vars] <- lapply(all_data[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mode <- mice(all_data[, !names(all_data) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method = "rf")
mice_output <- complete(mice_mode)
par(mfrow=c(1,2))
hist(all_data$Age, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
hist(mice_output$Age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
all_data$Age <- mice_output$Age
ggplot(all_data[1:891,], aes(Age, fill = factor(Survived))) +
geom_histogram() +
facet_grid(.~Sex) +
theme_few()
all_data$Child[all_data$Age < 18] <- 'Child'
all_data$Child[all_data$Age >= 18] <- 'Adult'
table(all_data$Survived, all_data$Child)
all_data$Mother <- 'Not Mother'
all_data$Mother[all_data$Sex == 'female' & all_data$Parch > 0 & all_data$Age > 18 & all_data$Title != 'Miss'] <- 'Mother'
table(all_data$Mother, all_data$Survived)
all_data$Child  <- factor(all_data$Child)
all_data$Mother <- factor(all_data$Mother)
md.pattern(all_data)
train <- all_data[1:891,]
test <- all_data[892:1309,]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
importance    <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'MeanDecreaseGini'],2))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip() +
theme_few()
library(e1071)
smv_model <- svm(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
svm_model <- svm(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
svm_sol <- predict(svm_model, test)
svm_pred <- predict(svm_model, test)
write.csv(svm_sol, file = "svm_mod_Solution.csv", row.names = F)
svm_pred <- predict(svm_model, test)
svm_pred
svm_model$labels
svm_model <- svm(Survived ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
View(train)
svm_model$labels
?svm
svm_model <- svm(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train,
kernel = "linear")
svm_model$labels
svm_model$fitted
svm_pred
svm_pred <- predict(svm_model, test[,c("sex", "Age", "SibSp","Parch","Fare","Embarked","Title","FsizeD","Child","Mother")])
View(test)
test[,"Sex"]
svm_pred <- predict(svm_model, test[,c("Sex", "Age", "SibSp","Parch","Fare","Embarked","Title","FsizeD","Child","Mother")])
svm_pred <- predict(svm_model, test[,c("Pclass","Sex", "Age", "SibSp","Parch","Fare","Embarked","Title","FsizeD","Child","Mother")])
svm_pred
svm_sol <- data.framedata.frame(PassengerID = test$PassengerId, Survived = svm_pred)
svm_sol <- data.frame(PassengerID = test$PassengerId, Survived = svm_pred)
write.csv(svm_sol, file = "svm_mod_Solution.csv", row.names = F)
View(svm_sol)
svm_sol <- data.frame(PassengerID = test$PassengerId, Survived = svm_pred)
write.csv(svm_sol, file = "svm_mod_Solution.csv", row.names = F)
mean(svm_pred$fitted == test$Survived)
mean(svm_model$fitted == test$Survived)
mean(svm_model$fitted == test$Survived)
mean(svm_model$fitted == train$Survived)
svm_model <- svm(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train,
kernel = "linear",cost = 1000)
svm_model <- svm(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train,
kernel = "linear",cost = 10)
mean(svm_model$fitted == train$Survived)
